<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:p="http://www.springframework.org/schema/p" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:util="http://www.springframework.org/schema/util"
	xsi:schemaLocation=" 
          http://www.springframework.org/schema/beans 
          http://www.springframework.org/schema/beans/spring-beans-3.0.xsd 
          http://www.springframework.org/schema/tx 
          http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
          http://www.springframework.org/schema/context 
          http://www.springframework.org/schema/context/spring-context-3.0.xsd 
          http://www.springframework.org/schema/util 
		  http://www.springframework.org/schema/util/spring-util-3.0.xsd
          http://www.springframework.org/schema/aop 
          http://www.springframework.org/schema/aop/spring-aop-3.0.xsd">

	<!-- Root Context: defines shared resources visible to all other web components -->
	<bean id="propertyConfigurer"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer"
		p:location="classpath:spring/jdbc.properties" />

		<!-- Druid -->
		<bean id="poolDataSource"  abstract="true">
			<property name="connectionProperties" value="${jdbc.driverClassName}" /> 
			
		 	<!-- 配置初始化大小、最小、最大 -->  
		    <property name="initialSize" value="10" />  
		    <property name="minIdle" value="10" />  
		    <property name="maxActive" value="200" />  
		  
		    <!-- 配置获取连接等待超时的时间 -->  
		    <property name="maxWait" value="60000" />  
		  
		    <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->  
		    <property name="timeBetweenEvictionRunsMillis" value="60000" />  
		  
		    <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->  
		    <property name="minEvictableIdleTimeMillis" value="300000" />  
		  
		    <property name="validationQuery" value="SELECT 1" />  
		    <property name="testWhileIdle" value="true" />  
		    <property name="testOnBorrow" value="false" />  
		    <property name="testOnReturn" value="false" />  
		  
		    <!-- 打开PSCache，并且指定每个连接上PSCache的大小 --><!-- 如果用Oracle，则把poolPreparedStatements配置为true，mysql可以配置为false。分库分表较多的数据库，建议配置为false。 -->  
		    <property name="poolPreparedStatements" value="false" />  
		    <property name="maxPoolPreparedStatementPerConnectionSize" value="20" />  
		  
		    <!-- 配置监控统计拦截的filters，去掉后监控界面sql无法统计 -->  
		    <property name="filters" value="stat" />  
		   
		   <!-- Druid 保存监控日志--> 
		   <property name ="timeBetweenLogStatsMillis" value ="600000" />
		   <property name= "statLogger" ref ="statLoggerb" />
		</bean>
		<!-- Druid -->
		
		<!-- Druid 保存监控记录-->
	 <bean id= "statLoggerb" class="com.alibaba.druid.pool.DruidDataSourceStatLoggerImpl" >
          <property name="logger" ref ="log4jb" />
     </bean>
     
     <bean id="log4jb" class="com.alibaba.druid.support.logging.Log4jImpl" >
           <constructor-arg><value>druid.statlog</value></constructor-arg>
     </bean>
     <!-- Druid 保存监控记录-->
		
	<bean id="ioaDataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close" parent="poolDataSource">   
		 <property name="url" value="${jdbc.ioa.databaseurl}" />  
		  <property name="username" value="${jdbc.ioa.username}" />  
		  <property name="password" value="${jdbc.ioa.password}" /> 
	</bean> 
	

	<bean id="crmDataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close" parent="poolDataSource">    
          <property name="url" value="${jdbc.crm.databaseurl}" />  
		  <property name="username" value="${jdbc.crm.username}" />  
		  <property name="password" value="${jdbc.crm.password}" /> 
	</bean> 
	
	
	
	<bean id="wmsDataSource" class="org.apache.commons.dbcp.BasicDataSource"
		destroy-method="close" p:driverClassName="${jdbc.driverClassName}"
		p:url="${jdbc.wms.databaseurl}" p:defaultCatalog="" p:username="${jdbc.wms.username}"
		p:password="${jdbc.wms.password}" p:maxActive="${jdbc.maxActive}"
		p:maxIdle="${jdbc.maxIdle}" p:maxWait="${jdbc.maxWait}"
		p:defaultAutoCommit="${jdbc.defaultAutoCommit}" p:removeAbandoned="${jdbc.removeAbandoned}"
		p:removeAbandonedTimeout="${jdbc.removeAbandonedTimeout}"
		p:logAbandoned="${jdbc.logAbandoned}" />

		


	

	<!-- transaction manager, use JtaTransactionManager for global tx -->
	<bean id="ioaTransactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="ioaDataSource" />
	</bean>
	<bean id="crmTransactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="crmDataSource" />
	</bean>
	<bean id="wmsTransactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="wmsDataSource" />
	</bean>
	
	<bean id="multipartResolver"
		class="org.springframework.web.multipart.commons.CommonsMultipartResolver"
		p:defaultEncoding="utf-8">
		<property name="resolveLazily" value="true" />
		<property name="maxUploadSize" value="100000000" />
	</bean>

	<util:properties id="settings" location="classpath:spring/jdbc.properties" />

	<bean id="throwsAdvice" class="com.zx.moa.util.aspect.ThrowableManage" />
	<bean id="beanNameAutoProxyCreator"
		class="org.springframework.aop.framework.autoproxy.BeanNameAutoProxyCreator">
		<property name="beanNames">
			<list>
				<value>*Service</value>
			</list>
		</property>
		<property name="interceptorNames">
			<value>throwsAdvice</value>
		</property>
	</bean>
	<aop:aspectj-autoproxy />

	<!-- 验证码组件配置 -->
	<bean id="captchaProducer" class="com.google.code.kaptcha.impl.DefaultKaptcha">
		<property name="config">
			<bean class="com.google.code.kaptcha.util.Config">
				<constructor-arg>
					<props>
						<prop key="kaptcha.border">no</prop>
						<prop key="kaptcha.border.color">105,179,90</prop>
						<prop key="kaptcha.textproducer.font.color">red</prop>
						<prop key="kaptcha.image.width">250</prop>
						<prop key="kaptcha.textproducer.font.size">120</prop>
						<prop key="kaptcha.image.height">160</prop>
						<prop key="kaptcha.session.key">code</prop>
						<prop key="kaptcha.textproducer.char.length">4</prop>
						<prop key="kaptcha.textproducer.font.names">宋体,宋体,宋体</prop>
					</props>
				</constructor-arg>
			</bean>
		</property>
	</bean>

	<tx:annotation-driven transaction-manager="transactionManager" />
	<bean id="myExceptionHandler" class="com.zx.moa.util.spring.ExceptionHandler"/>
	<!-- MyBatis配置 -->
	<!-- IOA -->
	<bean id="ioaSqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="ioaDataSource" />
		<!-- 自动扫描entity目录, 省掉Configuration.xml里的手工配置 -->
		<property name="typeAliasesPackage" value="com.zx.moa.util.gen.entity.ioa" />
		<!-- 显式指定Mapper文件位置 -->
		<property name="mapperLocations" value="classpath:mybatis/ioa/*/*Mapper.xml" />
		<!-- <property name="configLocation" value="classpath:spring/mybatis-configuration.xml" /> -->
	</bean>
	<!-- 扫描basePackage下所有以@MyBatisRepository标识的 接口 -->
	<bean id="ioaMapperScannerConfigurer" class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.zx.moa.ioa.*.persist" />
		<property name="annotationClass"
			value="com.zx.moa.util.mybatis.MyBatisRepository" />
		<property name="sqlSessionFactoryBeanName" value="ioaSqlSessionFactory" />
	</bean>
	<!-- CRM -->
	<bean id="crmSqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="crmDataSource" />
		<property name="typeAliasesPackage" value="com.zx.moa.util.gen.entity.crm" />
		<property name="mapperLocations" value="classpath:mybatis/crm/*/*Mapper.xml" />
	</bean>
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.zx.moa.crm.*.persist" />
		<property name="annotationClass"
			value="com.zx.moa.util.mybatis.MyBatisRepository" />
		<property name="sqlSessionFactoryBeanName" value="crmSqlSessionFactory" />
	</bean>
	<!-- WMS -->
	<bean id="wmsSqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="wmsDataSource" />
		<property name="typeAliasesPackage" value="com.zx.moa.util.gen.entity.wms" />
		<property name="mapperLocations" value="classpath:mybatis/wms/*/*Mapper.xml" />
<!-- 		<property name="configLocation" value="classpath:spring/mybatis-configuration.xml" /> -->
	</bean>
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.zx.moa.wms.*.persist" />
		<property name="annotationClass"
			value="com.zx.moa.util.mybatis.MyBatisRepository" />
		<property name="sqlSessionFactoryBeanName" value="wmsSqlSessionFactory" />
	</bean>

	<context:component-scan base-package="com.zx">
		<context:exclude-filter type="regex"
			expression="com.zx.moa.*.*.web.*" />
	</context:component-scan>

	<bean id="httpClientFactory"
		class="org.springframework.http.client.SimpleClientHttpRequestFactory">
		<property name="connectTimeout" value="30000" />
		<property name="readTimeout" value="60000" />
	</bean>
	<bean id="restTemplate" class="org.springframework.web.client.RestTemplate">
		<constructor-arg ref="httpClientFactory" />
	</bean>

	<!-- 配置发送模板bean -->
	<bean id="freeMarkerConfigurer"
		class="org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer">
		<property name="templateLoaderPaths" value="classpath:freemakertemplate" /><!-- 
			模板路径位置 -->
		<property name="freemarkerSettings">
			<props>
				<prop key="template_update_delay">0</prop><!-- 模板更新延时 -->
				<prop key="default_encoding">UTF-8</prop>
				<prop key="locale">zh_CN</prop>
			</props>
		</property>
	</bean>
	<bean id="schedulerFactoryBean" class="org.springframework.scheduling.quartz.SchedulerFactoryBean" />
	<bean id="quartzJobManage" class="com.zx.moa.ioa.util.QuartzJobManage" />
	<bean id="unfinishRemind" class="com.zx.moa.ioa.util.InitUnfinishedRemind" />
</beans>
